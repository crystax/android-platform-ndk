#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <stdio.h>

#define PYTHON2_STDLIB_REL_PATH "stdlib.zip"
#define PYTHON2_MODULES_REL_PATH "modules"
#define PYTHON2_DLL_REL_PATH L"python27.dll"

#define PATH_BUFFER_SIZE_A (2*MAX_PATH)
#define SYS_PATH_BUFFER_SIZE (4*MAX_PATH)

static void GetExecutablePath(wchar_t* path)
{
  unsigned size = GetModuleFileNameW(0, path, MAX_PATH);
  path[size] = 0;
}

static void GetRelativePathFormat(wchar_t* base, wchar_t* fmt)
{
  unsigned idx;
  wchar_t *p, *end;
  end = wcsrchr(base, '\\');
  for (idx = 0, p = base; *p; ++p, ++idx)
  {
    fmt[idx] = *p;
    if (p == end)
      break;
  }
  fmt[++idx] = '%';
  fmt[++idx] = 's';
  fmt[++idx] = 0;
}

static void ConvertToAnsiCodePage(const wchar_t* src, int srcBufferSize, char* dst, int dstBufferSize)
{
  const wchar_t* p;
  int ret;
  p = src;
  dst[0] = 0;
  while ((int)(p - src) < srcBufferSize && *p != 0)
    p++;
  if (p == src)
    return;
  ret = WideCharToMultiByte(CP_ACP, 0, src, (int)(p-src), dst, dstBufferSize-1, 0, 0);
  if (ret > 0)
    dst[ret] = 0;
  else
    dst[0] = 0;
}

typedef void (*Py_SetProgramNamePtr)(char*);
typedef void (*Py_SetPathPtr)(char*);
typedef int (*Py_MainPtr)(int, char **);

int main(int argc, char** argv)
{
  wchar_t executable[MAX_PATH]           = {0};
  wchar_t pthfmt[MAX_PATH]               = {0};
  wchar_t corepath[MAX_PATH]             = {0};
  char executable_a[PATH_BUFFER_SIZE_A]  = {0};
  char pthfmt_a[PATH_BUFFER_SIZE_A]      = {0};
  char stdlibpath_a[PATH_BUFFER_SIZE_A]  = {0};
  char modpath_a[PATH_BUFFER_SIZE_A]     = {0};
  char syspath_a[SYS_PATH_BUFFER_SIZE]   = {0};

  HMODULE core = 0;
  int retcode = 126;

  Py_SetProgramNamePtr Py_SetProgramName = 0;
  Py_SetPathPtr Py_SetPath = 0;
  Py_MainPtr Py_Main = 0;

  GetExecutablePath(executable);
  ConvertToAnsiCodePage(executable, MAX_PATH, executable_a, PATH_BUFFER_SIZE_A);

  GetRelativePathFormat(executable, pthfmt);
  ConvertToAnsiCodePage(pthfmt, MAX_PATH, pthfmt_a, PATH_BUFFER_SIZE_A);

  _snwprintf(corepath, MAX_PATH, pthfmt, PYTHON2_DLL_REL_PATH);

  _snprintf(stdlibpath_a, PATH_BUFFER_SIZE_A-1, pthfmt_a, PYTHON2_STDLIB_REL_PATH);
  _snprintf(modpath_a, PATH_BUFFER_SIZE_A-1, pthfmt_a, PYTHON2_MODULES_REL_PATH);
  _snprintf(syspath_a, SYS_PATH_BUFFER_SIZE-1, "%s;%s", stdlibpath_a, modpath_a);

  core = LoadLibraryExW(corepath, 0, 0);
  if (core == 0)
  {
    DWORD code = GetLastError();
    _fwprintf_p(stderr, L"Fatal Python error: cannot load library: '%s', LoadLibraryExW error code: %d\n", corepath, code);
    goto exit;
  }

  Py_SetProgramName = (Py_SetProgramNamePtr)GetProcAddress(core, "Py_SetProgramName");
  if (Py_SetProgramName == 0)
  {
    DWORD code = GetLastError();
    _fwprintf_p(stderr, L"Fatal Python error: cannot load symbol: '%s' from library '%s', GetProcAddress error code: %d\n", L"Py_SetProgramName", corepath, code);
    goto exit;
  }

  Py_SetPath = (Py_SetPathPtr)GetProcAddress(core, "Py_SetPath");
  if (Py_SetPath == 0)
  {
    DWORD code = GetLastError();
    _fwprintf_p(stderr, L"Fatal Python error: cannot load symbol: '%s' from library '%s', GetProcAddress error code: %d\n", L"Py_SetPath", corepath, code);
    goto exit;
  }

  Py_Main = (Py_MainPtr)GetProcAddress(core, "Py_Main");
  if (Py_Main == 0)
  {
    DWORD code = GetLastError();
    _fwprintf_p(stderr, L"Fatal Python error: cannot load symbol: '%s' from library '%s', GetProcAddress error code: %d\n", L"Py_Main", corepath, code);
    goto exit;
  }

  Py_SetProgramName(executable_a);
  Py_SetPath(syspath_a);
  retcode = Py_Main(argc, argv);

exit:
  if (core != 0)
    FreeLibrary(core);
  
  return retcode;
}
